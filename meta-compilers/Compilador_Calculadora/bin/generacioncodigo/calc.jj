options {
LOOKAHEAD=1;
}
PARSER_BEGIN(Calculadora)
package generacioncodigo;

import java.util.HashMap;
public class Calculadora {

  public static String javaCode ="";
  private static HashMap<String , Integer> variables ;

  
  private static int valorDeLaVariable(String aux) {
	  Integer val =variables.get(aux);
	 if( val==null){
		 // No existe la variable error semantico
		 
		 return -9999;
	 }else
	 { return val;}
	}

  private static void insertaValor(String indice, Integer valor) {
	try{
		variables.put(indice, valor);
	}catch(Exception  e){
		//errores de numero
	}
  }

	public static void main(String args[]) throws ParseException, TokenMgrError{
		Calculadora parser = new Calculadora(System.in);
		while (true) {
			System.out.print("Introduzca una expresion: ");
			System.out.flush();
			try {
				switch (parser.one_line()) {
					case -1:
						System.exit(0);
					default:
						break;
				}
				System.out.println("JavaCode: "+javaCode);
			}
			
			catch (ParseException x) {
				System.out.println("Finalizando.");
				throw x;
			}
		}
	}
}
PARSER_END(Calculadora)

SKIP : { " " | "\r" | "\t" }

TOKEN :
{
< EOL: "\n" >
}
TOKEN : /* OPERADORES */
{
	<MAS: "+" >
	|
	< MENOS: "-" >
	|
	< POR: "*" >
	|
	< ENTRE: "/" >
	| <IGUAL: "=">
}

TOKEN :
{
	< CONSTANTE: ( <DIGITO> )+ > | < #DIGITO: ["0" - "9"] >
}

TOKEN :
{
	<VARIABLE: <LETRA>>
	|
	<#LETRA:["A"-"Z"]>
}

int one_line() :
{
	int resultado;
}
{
  try  {    
	LOOKAHEAD(2)
	resultado=suma(){System.out.println("El resultado es: "+resultado);}
		<EOL>{ return 1; }
		| decl_var() <EOL>{return 0;}
		| <EOL>{ return 0; }
		| <EOF>
	{ return -1; }
	}catch(ParseException e)	{
	      error_skipto(EOL);	}
}

int suma() :
{
	int resultado;
	int aux;
	
}
{
	resultado=termino() 
	( <MAS>	{
	  javaCode += "+";	}aux=termino(){resultado=resultado+aux; }
	| <MENOS>	{		javaCode += "-";
	}aux=termino(){resultado=resultado-aux; }
	)*
	{return resultado;}
}
int termino() :
	{ int resultado;
	int aux;}
{
	resultado=unario()
		( 	<POR>		{
		  javaCode += "*";		} aux=unario(){ resultado=resultado*aux;  }
			| <ENTRE>			{
			  javaCode += "/"; 			}aux=unario(){resultado=resultado/aux; }
		)*
{return resultado;}
}


int unario() :
{
	int resultado;
}
{
	(
		<MENOS> resultado=elemento()
		{
		  resultado=0-resultado;
		  javaCode += "-";
		}
		|	resultado=elemento()
		{
		  //javaCode += resultado;		}
	)
	{
		return resultado;
	}
}


int elemento() :
	{
		Integer valor;
		int resultado;
		String aux;
	}
{
	( <CONSTANTE>
		{	valor=new Integer(token.image);
			resultado=valor.intValue();
			javaCode += ""+valor;
		}
	  | <VARIABLE>
		{   aux=new String(token.image);
			resultado=valorDeLaVariable(aux);
			javaCode += ""+aux;
		}
	  | "(" resultado=suma() ")"
	)
	{
		return resultado;
	}
}


void decl_var() :
{	Integer valor;
	String indice;
	
}
{
	<VARIABLE>{indice=new String(token.image);javaCode+="int "+indice+"=";}
	<IGUAL>
	<CONSTANTE>{valor=new Integer(token.image);
				insertaValor(indice,valor);
				javaCode+=valor+"\n";
				}
}

JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}
